% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pb_download_url.R
\name{pb_download_url}
\alias{pb_download_url}
\title{Get the download url of a given file}
\usage{
pb_download_url(
  file = NULL,
  repo = guess_repo(),
  tag = "latest",
  url_type = c("browser", "api"),
  .token = gh::gh_token()
)
}
\arguments{
\item{file}{character: vector of names of files to be downloaded. If \code{NULL},
all assets attached to the release will be downloaded.}

\item{repo}{string: GH repository name in format "owner/repo". Default \code{guess_repo()}
tries to guess based on current working directory's git repository}

\item{tag}{string: tag for the GH release, defaults to "latest"}

\item{url_type}{choice: one of "browser" or "api" - default "browser" is a
web-facing URL that is not subject to API ratelimits but does not work for
private repositories. "api" URLs work for private repos, but require a GitHub
token passed in an Authorization header (see examples)}

\item{.token}{GitHub authentication token, see \code{\link[gh:gh_token]{gh::gh_token()}}}
}
\value{
the URL to download a file
}
\description{
Returns the URL download for a given file. This can be useful when using
functions that are able to accept URLs.
}
\examples{
\donttest{
\dontshow{try(\{}

# returns browser url by default
pb_download_url("iris.tsv.xz", repo = "cboettig/piggyback-tests", tag = "v0.0.1")

# can return api url if desired
pb_download_url("iris.tsv.xz", repo = "cboettig/piggyback-tests", tag = "v0.0.1", url_type = "api")

\dontshow{\})}
}
}
